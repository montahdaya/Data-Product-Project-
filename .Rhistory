shiny::runApp('R/R1/9.Developing-Data-Products/Shiny App/dataproduct')
shiny::runApp('R/R1/9.Developing-Data-Products/Shiny App/dataproduct')
dt <- fread('data/repdata-data-StormData.csv')
setwd("~/R/R1/9.Developing-Data-Products/Shiny App/dataproduct")
dt <- fread('data/repdata-data-StormData.csv')
dt <- read.csv('data/repdata-data-StormData.csv')
head(dt)
states_map <- map_data("state")
evtypes <- sort(unique(dt$EVTYPE))
evtypes
states_map
shinyServer(function(input, output, session) {
# Define and initialize reactive values
values <- reactiveValues()
values$evtypes <- evtypes
# Create event type checkbox
output$evtypeControls <- renderUI({
checkboxGroupInput('evtypes', 'Event types', evtypes, selected=values$evtypes)
})
observe({
if(input$clear_all == 0) return()
values$evtypes <- c()
})
observe({
if(input$select_all == 0) return()
values$evtypes <- evtypes
})
# Preapre datasets
# Prepare dataset for maps
dt.agg <- reactive({
aggregate_by_state(dt, input$range[1], input$range[2], input$evtypes)
})
# Prepare dataset for time series
dt.agg.year <- reactive({
aggregate_by_year(dt, input$range[1], input$range[2], input$evtypes)
})
# Prepare dataset for downloads
dataTable <- reactive({
prepare_downolads(dt.agg())
})
output$populationImpactByState <- renderPlot({
print(plot_impact_by_state (
dt = compute_affected(dt.agg(), input$populationCategory),
states_map = states_map,
year_min = input$range[1],
year_max = input$range[2],
title = "Population impact %d - %d (number of affected)",
fill = "Affected"
))
})
output$economicImpactByState <- renderPlot({
print(plot_impact_by_state(
dt = compute_damages(dt.agg(), input$economicCategory),
states_map = states_map,
year_min = input$range[1],
year_max = input$range[2],
title = "Economic impact %d - %d (Million USD)",
fill = "Damages"
))
})
output$eventsByYear <- renderChart({
plot_events_by_year(dt.agg.year())
})
output$populationImpact <- renderChart({
plot_impact_by_year(
dt = dt.agg.year() %>% select(year, Injuries, Fatalities),
dom = "populationImpact",
yAxisLabel = "Affected",
desc = TRUE
)
})
output$economicImpact <- renderChart({
plot_impact_by_year(
dt = dt.agg.year() %>% select(year, Crops, Property),
dom = "economicImpact",
yAxisLabel = "Total damage (Million USD)"
)
})
output$table <- renderDataTable(
{dataTable()}, options = list(bFilter = FALSE, iDisplayLength = 50))
output$downloadData <- downloadHandler(
filename = 'StormData.csv',
content = function(file) {
write.csv(dataTable(), file, row.names=FALSE)
}
)
})
output
dt <- fread('data/events.agg.csv') %>% mutate(EVTYPE = tolower(EVTYPE))
dt <- read.csv('data/events.agg.csv')
head(dt)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
evtypes
dt
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
